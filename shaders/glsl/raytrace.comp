#version 450

#include "GEN_MATERIALS.glsl"

// If defined, a limiter will be applied to terminate any ray trace that takes too long. The pixel
// the ray trace occured for will be highlighted in pink.
#define REPORT_ERROR

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform usampler3D world;
layout(set = 0, binding = 1) uniform usampler3D minefield;

layout(set = 0, binding = 2, rgba8) uniform writeonly image2D albedo_buffer;
layout(set = 0, binding = 3, rgba8) uniform writeonly image2D emission_buffer;
layout(set = 0, binding = 4, rgba8) uniform writeonly image2D fog_color_buffer;

layout(set = 0, binding = 5, rgba16) uniform writeonly image2D lighting_buffer;
layout(set = 0, binding = 6, rgba16) uniform writeonly image2D completed_buffer;
layout(set = 0, binding = 7, r8ui) uniform writeonly uimage2D normal_buffer;
layout(set = 0, binding = 8, r16ui) uniform writeonly uimage2D depth_buffer;

layout(set = 0, binding = 9) uniform sampler2D blue_noise;
// TODO: Make this more compact.
layout(set = 0, binding = 10) uniform UniformData {
    float sun_angle;
    uint seed;
    vec3 origin, forward, up, right;
    // For some reason doing mat3 still loads 16 elements but the rust bindings give it 9, making
    // the whole thing go out of order. So transmit each individual column instead.
    vec3 old_origin, old_transform_c0, old_transform_c1, old_transform_c2;
    ivec3 region_offset;
    ivec3 l0r, l1r, l2r, l3r;
    ivec3 l0so, l1so, l2so, l3so;
} uniform_data;

layout(set = 0, binding = 11) uniform usampler3D world_lod1;
layout(set = 0, binding = 12) uniform usampler3D minefield_lod1;
layout(set = 0, binding = 13) uniform usampler3D world_lod2;
layout(set = 0, binding = 14) uniform usampler3D minefield_lod2;
layout(set = 0, binding = 15) uniform usampler3D world_lod3;
layout(set = 0, binding = 16) uniform usampler3D minefield_lod3;

const uint ROOT_BLOCK_WIDTH = 256;

const uint EMPTY_CHUNK_INDEX = 0xFFFF;
const uint UNLOADED_CHUNK_INDEX = 0xFFFE;
const uint REQUEST_LOAD_CHUNK_INDEX = 0xFFFD;

const uint NOISE_SIZE = 512;

const uint NORMAL_x = 0;
const uint NORMAL_y = 2;
const uint NORMAL_z = 4;

// Gap between each pixel that a particular thread group computes.
// E.G. if a 4x4 group uses a spread value of 2, it will compute the first, third, fifth,
// and seventh pixels relative to its start location. The thread group directly to the right of it
// will compute the second, fourth, sixth, and eighth. The next thread group to the right will
// start on the ninth pixel, and so on.
const uint PIXEL_SPREAD = 16;
// Lighting values are divided by this before being added to the lighting buffer. This gives
// room for HDR and accumulation of multiple samples.
const float LIGHTING_SCALE = 16.0;
const uint MAX_SAMPLES = 8;

const float PI = 3.1415926535897932384626433832795;

struct HitResult {
    vec3 albedo;
    vec3 emission;
    bool air;
    float distance;
    uint normal;
    vec3 position;
};

vec4 noise_value;
vec2 noise_offset;

#ifdef REPORT_ERROR
bool error = false;
#endif

uint get_step(vec3 tex_pos, uint current_lod) {
    if (current_lod == 0) {
        return texture(minefield, tex_pos).r;
    } else if (current_lod == 1) {
        return texture(minefield_lod1, tex_pos).r;
    } else if (current_lod == 2) {
        return texture(minefield_lod2, tex_pos).r;
    } else if (current_lod == 3) {
        return texture(minefield_lod3, tex_pos).r;
    }
}

HitResult trace_ray(vec3 origin, vec3 direction) {
    direction = normalize(direction);
    HitResult result;
    result.position = origin;

    // How much to travel along the ray to move 1 unit in a particular axis.
    vec3 length_per_axis = vec3(1) / vec3(abs(direction));
    ivec3 normals = ivec3(
        direction.x > 0 ? NORMAL_x + 1 : NORMAL_x,
        direction.y > 0 ? NORMAL_y + 1 : NORMAL_y,
        direction.z > 0 ? NORMAL_z + 1 : NORMAL_z
    );
    vec3 muls = vec3(
        direction.x > 0 ? -1 : 1,
        direction.y > 0 ? -1 : 1,
        direction.z > 0 ? -1 : 1
    );

    uint current_lod = 0;
    // "rotation" here refers to offsetting the coordinates in a particular LOD via modular
    // arithmetic. E.G. having a rotation of 10 on the X axis means coordinate 0 is really
    // coordinate 10, and coordinate ROOT_BLOCK_WIDTH is also coordinate 10
    // TODO: Investigate weird rendering lag when rotated along z axis and rendering from outside
    // LOD 0. It doesn't happen when inside LOD 0 but it might still be dragging down performance
    // in hidden ways.
    // Also investigate high lag when sticking my head in a block.
    vec3 current_rotation = uniform_data.l0r;
    if (
        abs(origin.x - uniform_data.l2so.x) > ROOT_BLOCK_WIDTH * 2
        || abs(origin.y - uniform_data.l2so.y) > ROOT_BLOCK_WIDTH * 2
        || abs(origin.z - uniform_data.l2so.z) > ROOT_BLOCK_WIDTH * 2
    ) {
        current_lod = 3;
        current_rotation = uniform_data.l3r;
    } else if (
        abs(origin.x - uniform_data.l1so.x) > ROOT_BLOCK_WIDTH
        || abs(origin.y - uniform_data.l1so.y) > ROOT_BLOCK_WIDTH
        || abs(origin.z - uniform_data.l1so.z) > ROOT_BLOCK_WIDTH
    ) {
        current_lod = 2;
        current_rotation = uniform_data.l2r;
    } else if (
        abs(origin.x - uniform_data.l0so.x) > ROOT_BLOCK_WIDTH / 2
        || abs(origin.y - uniform_data.l0so.y) > ROOT_BLOCK_WIDTH / 2
        || abs(origin.z - uniform_data.l0so.z) > ROOT_BLOCK_WIDTH / 2
    ) {
        current_lod = 1;
        current_rotation = uniform_data.l1r;
    }
    uint lod_divisor = (1 << current_lod);
    vec3 pos_offset = vec3(ROOT_BLOCK_WIDTH / 2 * lod_divisor);
    uint current_step = get_step(mod((result.position + pos_offset) / lod_divisor, ROOT_BLOCK_WIDTH), current_lod);
    uint step_size = (1 << current_step) / 2;

    uint limit = 2048;
    vec3 length_to_next_voxel, lookup_offset;
    // For some reason, using a non-infinite loop boosts performance even though
    // the limit of the loop is never reached.
    for (; limit > 0; limit--) {
        // Things that don't increase performance: 
        // - pre-multiplying result.position 
        // - only setting the result normal if a new value gets hit.
        // - distributing the addition of the offset in any way.
        //    - although this point might be worth investigating now that there's three offsets.
        length_to_next_voxel = (vec3(0.0001) + mod((result.position + pos_offset) * muls, vec3(step_size))) * length_per_axis;
        if (length_to_next_voxel.x < length_to_next_voxel.y) {
            if (length_to_next_voxel.x < length_to_next_voxel.z) { 
                result.position += direction * length_to_next_voxel.x;
                result.normal = normals.x;
            } else {
                result.position += direction * length_to_next_voxel.z;
                result.normal = normals.z;
            }
        } else {
            if (length_to_next_voxel.y < length_to_next_voxel.z) { 
                result.position += direction * length_to_next_voxel.y;
                result.normal = normals.y;
            } else {
                result.position += direction * length_to_next_voxel.z;
                result.normal = normals.z;
            }
        }
        current_step = get_step(mod((result.position + pos_offset) / lod_divisor, ROOT_BLOCK_WIDTH), current_lod);
        if (
            abs(result.position.x - current_rotation.x) >= ROOT_BLOCK_WIDTH / 2 * lod_divisor
            || abs(result.position.y - current_rotation.y) >= ROOT_BLOCK_WIDTH / 2 * lod_divisor
            || abs(result.position.z - current_rotation.z) >= ROOT_BLOCK_WIDTH / 2 * lod_divisor
        ) {
            // We encountered the edge of the LOD.
            if (current_lod < 3) {
                current_lod += 1;
                lod_divisor *= 2;
                pos_offset *= 2;
            } else {
                // We hit the sky.
                break;
            }
            if (current_lod == 1) {
                current_rotation = uniform_data.l1r;
            } else if (current_lod == 2) {
                current_rotation = uniform_data.l2r;
            } else if (current_lod == 3) {
                current_rotation = uniform_data.l3r;
            }
            // If we're still outside the bounds of the new LOD, increase to the next LOD.
            if (
                abs(result.position.x - current_rotation.x) >= ROOT_BLOCK_WIDTH / 2 * lod_divisor
                || abs(result.position.y - current_rotation.y) >= ROOT_BLOCK_WIDTH / 2 * lod_divisor
                || abs(result.position.z - current_rotation.z) >= ROOT_BLOCK_WIDTH / 2 * lod_divisor
            ) {
                // We encountered the edge of the LOD.
                if (current_lod < 3) {
                    current_lod += 1;
                    lod_divisor *= 2;
                    pos_offset *= 2;
                } else {
                    // We hit the sky.
                    break;
                }
                if (current_lod == 1) {
                    current_rotation = uniform_data.l1r;
                } else if (current_lod == 2) {
                    current_rotation = uniform_data.l2r;
                } else if (current_lod == 3) {
                    current_rotation = uniform_data.l3r;
                }
            }
            // Get the current step, according to the new LOD.
            current_step = get_step(mod((result.position + pos_offset) / lod_divisor, ROOT_BLOCK_WIDTH), current_lod);
            // We encountered a block. We haven't had time to get to the edge yet.
            if (current_step <= current_lod) break;
        } else if (current_step <= current_lod) {
            // We encountered a block inside the minefield.
            break;
        }
        step_size = (1 << current_step) / 2;
    }

    result.distance = length(origin - result.position);
    uint packed_material = 0;
    if (current_lod == 0) {
        // TODO: I don't think we need to use the textureLod function here.
        packed_material = textureLod(
            world, 
            mod((result.position + pos_offset) / vec3(ROOT_BLOCK_WIDTH), 1.0), 
            0.0
        ).r;
    } else if (current_lod == 1) {
        packed_material = textureLod(
            world_lod1, 
            mod((result.position + pos_offset) / vec3(ROOT_BLOCK_WIDTH * 2), 1.0), 
            0.0
        ).r;
    } else if (current_lod == 2) {
        packed_material = textureLod(
            world_lod2, 
            mod((result.position + pos_offset) / vec3(ROOT_BLOCK_WIDTH * 4), 1.0), 
            0.0
        ).r;
    } else if (current_lod == 3) {
        if (
            abs(result.position.x - current_rotation.x) < ROOT_BLOCK_WIDTH * 4
            && abs(result.position.y - current_rotation.y) < ROOT_BLOCK_WIDTH * 4
            && abs(result.position.z - current_rotation.z) < ROOT_BLOCK_WIDTH * 4
        ) {
            result.air = false;
            packed_material = textureLod(
                world_lod3, 
                mod((result.position + pos_offset) / vec3(ROOT_BLOCK_WIDTH * 8), 1.0), 
                0.0
            ).r;
        } else {
            result.air = true;
        }
    }
    result.emission = vec3(0); // Packed materials don't contain emission data yet.
    result.albedo.r = (packed_material >> 14 & 0x7F) / (0x7F + 0.0);
    result.albedo.g = (packed_material >> 7 & 0x7F) / (0x7F + 0.0);
    result.albedo.b = (packed_material >> 0 & 0x7F) / (0x7F + 0.0);

    float offset_amount = 0.001;

    if (result.normal == NORMAL_x) {
        result.position += vec3(offset_amount, 0, 0);
    } else if (result.normal == NORMAL_x + 1) {
        result.position -= vec3(offset_amount, 0, 0);
    } else if (result.normal == NORMAL_y) {
        result.position += vec3(0, offset_amount, 0);
    } else if (result.normal == NORMAL_y + 1) {
        result.position -= vec3(0, offset_amount, 0);
    } else if (result.normal == NORMAL_z) {
        result.position += vec3(0, 0, offset_amount);
    } else if (result.normal == NORMAL_z + 1) {
        result.position -= vec3(0, 0, offset_amount);
    }

    return result;
}

HitResult trace_sun(HitResult from, vec3 direction) {
    return trace_ray(from.position, normalize(direction + vec3(noise_value.rg, 0) * 0.05));
}

vec3 diffuse_direction(HitResult from) {
    float theta1 = PI * 2.0 * noise_value.r;
    float theta2 = acos(1.0 - 2.0 * noise_value.g);
    // Random point on sphere.
    vec3 direction = vec3(
        sin(theta1) * sin(theta2),
        cos(theta1) * sin(theta2),
        cos(theta2)
    );
    if (from.normal == NORMAL_x) {
        direction += vec3(1, 0, 0);
    } else if (from.normal == NORMAL_x + 1) {
        direction -= vec3(1, 0, 0);
    } else if (from.normal == NORMAL_y) {
        direction += vec3(0, 1, 0);
    } else if (from.normal == NORMAL_y + 1) {
        direction -= vec3(0, 1, 0);
    } else if (from.normal == NORMAL_z) {
        direction += vec3(0, 0, 1);
    } else if (from.normal == NORMAL_z + 1) {
        direction -= vec3(0, 0, 1);
    }
    return normalize(direction);
}

vec3 debug_normal(uint normal) {
    vec3 color = vec3(1);
    if (normal % 2 == 1) {
        normal -= 1;
        color *= 0.5;
    }
    if (normal == NORMAL_x) {
        color *= vec3(1, 0, 0);
    } else if (normal == NORMAL_y) {
        color *= vec3(0, 1, 0);
    } else if (normal == NORMAL_z) {
        color *= vec3(0, 0, 1);
    }
    return color;
}

vec3 world_space_normal(uint normal) {
    vec3 world_space = vec3(1.0);
    if (normal % 2 == 1) {
        normal -= 1;
        world_space *= -1.0;
    }
    if (normal == NORMAL_x) {
        world_space *= vec3(1, 0, 0);
    } else if (normal == NORMAL_y) {
        world_space *= vec3(0, 1, 0);
    } else if (normal == NORMAL_z) {
        world_space *= vec3(0, 0, 1);
    }
    return world_space;
}

vec3 encode_world_space_normal(uint normal) {
    return world_space_normal(normal) * 0.5 + vec3(0.5);
}

vec2 encode_screen_space_normal(uint normal, vec3 right, vec3 up) {
    vec3 world_space = world_space_normal(normal);
    vec2 screen_space = vec2(
        dot(world_space, right),
        dot(world_space, up)
    );
    return screen_space * 0.5 + vec2(0.5);
}

vec3 sun_color(vec3 sun_direction) {
    float horizon = length(sun_direction.xy);
    float sun_amount = min(1.0 - horizon, 0.02) * 50.0;
    vec3 main_color = vec3(0.9647, 0.7843, 0.8824) * 2.0;
    vec3 sunset_color = vec3(0.7412, 0.2157, 0.1686) * 2.0;
    if (sun_direction.z >= 0.0) {
        return mix(sunset_color, main_color, sun_amount);
    } else {
        return mix(sunset_color, vec3(0), sun_amount * 2);
    }
}

vec3 sample_sky(vec3 direction, vec3 sun_direction, vec3 sunlight, bool include_sun) {
    if (direction.z < 0.0) {
        // direction = normalize(vec3(direction.xy, 0.0));
    }
    vec3 bright_color = vec3(0.5294, 0.8275, 0.9647);
    vec3 dark_color = vec3(0.0863, 0.1294, 0.2196);
    float sunlight_amount = clamp((sunlight.x + sunlight.y + sunlight.z) * 0.2 - 0.02, 0.0, 1.0);
    float horizon = pow(length(direction.xy), mix(40.0, 10.0, sunlight_amount));
    float sun_amount = 1.0 - 0.5 * length(sun_direction - direction);
    float sun_halo_amount = pow(sun_amount, mix(5.0, 1.0, sunlight_amount));
    float bright_amount = min(horizon + sun_halo_amount * 0.5, 1.0);
    vec3 color = mix(dark_color, bright_color, bright_amount * max(sunlight_amount, 0.1));
    color += sunlight * pow(sun_amount, 5.0) * 0.5;
    if (sun_amount > 0.98 && include_sun) {
        color += sunlight;
    }
    return color;
}

void main() {
    ivec2 pixel = ivec2(gl_WorkGroupID.xy - gl_WorkGroupID.xy % ivec2(PIXEL_SPREAD));
    pixel *= ivec2(gl_WorkGroupSize.xy);
    pixel += ivec2(gl_WorkGroupID.xy) % ivec2(PIXEL_SPREAD);
    pixel += ivec2(gl_LocalInvocationID.xy * PIXEL_SPREAD);

    vec2 screen_pos = pixel / vec2(imageSize(lighting_buffer));
    screen_pos = screen_pos * 2 - vec2(1);
    vec2 lookup_pos = vec2(
        (uniform_data.seed % NOISE_SIZE),
        (uniform_data.seed / NOISE_SIZE)
    );
    noise_offset.x = texture(blue_noise, lookup_pos).r * 255.0;
    noise_offset.y = texture(blue_noise, lookup_pos).g * 255.0;
    noise_offset += gl_WorkGroupID.xy * gl_WorkGroupSize.xy;

    vec3 ray_start = uniform_data.origin;
    vec3 ray_direction = normalize(
        uniform_data.forward
        + screen_pos.x * uniform_data.right
        + screen_pos.y * uniform_data.up
    );

    vec3 sunangle = normalize(vec3(cos(uniform_data.sun_angle) * 0.5 + (uniform_data.sun_angle - 0.5) * 0.5, sin(uniform_data.sun_angle), cos(uniform_data.sun_angle)));
    vec3 sunlight = sun_color(sunangle);
    vec3 light = vec3(0.0);
    HitResult primary = trace_ray(uniform_data.origin, ray_direction);
    if (primary.air) {
        light = sample_sky(ray_direction, sunangle, sunlight, true);
    } else {
        noise_value = texture(blue_noise, mod(noise_offset, vec2(NOISE_SIZE)));
        HitResult sun1 = trace_sun(primary, sunangle);
        if (sun1.air) {
            light += sunlight;
        }
        vec3 dif1_dir = diffuse_direction(primary);
        HitResult dif1 = trace_ray(primary.position, dif1_dir);
        if (dif1.air) {
            light += sample_sky(dif1_dir, sunangle, sunlight, true);
        } else {
            vec3 light2 = vec3(0.0);
            vec3 albedo2 = dif1.albedo;
            noise_value = texture(blue_noise, mod(noise_offset + vec2(2.0 / NOISE_SIZE), vec2(NOISE_SIZE)));
            HitResult sun2 = trace_sun(dif1, sunangle);
            if (sun2.air) {
                light2 += sunlight;
            }
            vec3 dif2_dir = diffuse_direction(dif1);
            HitResult dif2 = trace_ray(dif1.position, dif2_dir);
            if (dif2.air) {
                light2 += sample_sky(dif2_dir, sunangle, sunlight, true);
            }
            light2 *= albedo2;
            light2 += dif1.emission;
            light += light2;
        }
    }

    imageStore(
      lighting_buffer,
      pixel,
      vec4(light, 1.0) / LIGHTING_SCALE
    );
    uint distance = 0xFFFF;
    if (!primary.air) {
        distance = uint(length(uniform_data.origin - primary.position) * 32);
    }
    imageStore(
        depth_buffer,
        pixel,
        uvec4(distance, 0, 0, 0)
    );
    imageStore(
        normal_buffer,
        pixel,
        uvec4(primary.air ? 16 : primary.normal)
    );
    imageStore(
        albedo_buffer,
        pixel,
        primary.air ? vec4(1.0) : vec4(primary.albedo, 1.0)
    );
    imageStore(
        emission_buffer,
        pixel,
        primary.air ? vec4(0.0) : vec4(primary.emission / 4.0, 1.0)
    );
    imageStore(
        fog_color_buffer,
        pixel,
        vec4(sample_sky(ray_direction, sunangle, sunlight, false) / 2.0, 1.0)
    );

    #ifdef REPORT_ERROR
    if (error) {
        imageStore(
            fog_color_buffer,
            pixel,
            vec4(1, 0, 1, 1)
        );
        imageStore(
            depth_buffer,
            pixel,
            uvec4(256 * 254)
        );
    }
    #endif
}