#version 450

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba16) uniform image2D lighting_buffer;
layout(set = 0, binding = 1, rgba8) uniform image2D albedo_buffer;
layout(set = 0, binding = 2, rgba8) uniform image2D emission_buffer;
layout(set = 0, binding = 3, rgba8) uniform image2D fog_color_buffer;
layout(set = 0, binding = 4, r16ui) uniform uimage2D depth_buffer;
layout(set = 0, binding = 5, r8ui) uniform uimage2D history_buffer;
layout(set = 0, binding = 6) uniform sampler2D blue_noise;
layout(set = 1, binding = 0, rgba8) uniform writeonly image2D final_output;

const uint NOISE_SIZE = 512;
const float LIGHTING_SCALE = 16.0;

// A kind of naiive filmic curve.
float filmic_curve(float x) {
    if (x < 0.3) {
        return x * x;
    } else if (x < 1.13333) {
        return x * 0.6 - 0.09;
    } else if (x < 2.5) {
        return 1.0 - 0.219512195116 * (x - 2.5) * (x - 2.5);
    } else {
        return 1.0;
    }
}

void main() {
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    vec3 light_color = imageLoad(lighting_buffer, pixel).rgb * LIGHTING_SCALE / vec3(imageLoad(history_buffer, pixel).r);
    vec3 albedo_color = imageLoad(albedo_buffer, pixel).rgb;
    vec3 emission_color = imageLoad(emission_buffer, pixel).rgb * 4.0;
    vec3 final_color = albedo_color * light_color + emission_color;

    vec3 fog_color = imageLoad(fog_color_buffer, pixel).rgb;
    float fog_amount = imageLoad(depth_buffer, pixel).r / 256.0 / 128.0;
    if (fog_amount > 1.0) fog_amount = 1.0;
    final_color = final_color * (1 - fog_amount) + fog_color * fog_amount;

    final_color.r = filmic_curve(final_color.r);
    final_color.g = filmic_curve(final_color.g);
    final_color.b = filmic_curve(final_color.b);

    vec2 noise_position = gl_GlobalInvocationID.xy;
    noise_position = mod(noise_position, vec2(NOISE_SIZE));
    vec4 blue_noise_value = texture(blue_noise, noise_position);
    final_color += blue_noise_value.rgb / 128.0; // Blue noise dithering.

    int output_height = imageSize(final_output).y;
    // The window coordinate system is upside-down relative to the world's coordinate system.
    ivec2 translated_pixel = ivec2(pixel.x, output_height - pixel.y - 1);
    imageStore(final_output, translated_pixel, vec4(final_color, 1.0));
}